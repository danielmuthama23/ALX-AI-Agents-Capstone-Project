{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{useLocalStorage}from'../hooks/useLocalStorage';import{jsx as _jsx}from\"react/jsx-runtime\";export const ThemeContext=/*#__PURE__*/createContext(undefined);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useLocalStorage('theme','system');const[resolvedTheme,setResolvedTheme]=useState('light');// Get system preference\nconst getSystemTheme=()=>{if(typeof window==='undefined')return'light';return window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light';};// Resolve theme based on preference\nconst resolveTheme=()=>{if(theme==='system'){return getSystemTheme();}return theme;};// Apply theme to document\nconst applyTheme=newTheme=>{const root=window.document.documentElement;root.classList.remove('light','dark');root.classList.add(newTheme);root.style.colorScheme=newTheme;setResolvedTheme(newTheme);};// Initialize theme\nuseEffect(()=>{const initialTheme=resolveTheme();applyTheme(initialTheme);},[]);// Update theme when preference changes\nuseEffect(()=>{const newTheme=resolveTheme();applyTheme(newTheme);// Listen for system theme changes\nconst mediaQuery=window.matchMedia('(prefers-color-scheme: dark)');const handleChange=()=>{if(theme==='system'){applyTheme(getSystemTheme());}};mediaQuery.addEventListener('change',handleChange);return()=>mediaQuery.removeEventListener('change',handleChange);},[theme]);const handleSetTheme=newTheme=>{setTheme(newTheme);};const toggleTheme=()=>{setTheme(current=>{if(current==='light')return'dark';if(current==='dark')return'system';return'light';});};const value={theme,resolvedTheme,setTheme:handleSetTheme,toggleTheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};export const useTheme=()=>{const context=React.useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useEffect","useLocalStorage","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","resolvedTheme","setResolvedTheme","getSystemTheme","window","matchMedia","matches","resolveTheme","applyTheme","newTheme","root","document","documentElement","classList","remove","add","style","colorScheme","initialTheme","mediaQuery","handleChange","addEventListener","removeEventListener","handleSetTheme","toggleTheme","current","value","Provider","useTheme","context","useContext","Error"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\nexport type Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  resolvedTheme: 'light' | 'dark';\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useLocalStorage<Theme>('theme', 'system');\n  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');\n\n  // Get system preference\n  const getSystemTheme = (): 'light' | 'dark' => {\n    if (typeof window === 'undefined') return 'light';\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n\n  // Resolve theme based on preference\n  const resolveTheme = (): 'light' | 'dark' => {\n    if (theme === 'system') {\n      return getSystemTheme();\n    }\n    return theme;\n  };\n\n  // Apply theme to document\n  const applyTheme = (newTheme: 'light' | 'dark') => {\n    const root = window.document.documentElement;\n    \n    root.classList.remove('light', 'dark');\n    root.classList.add(newTheme);\n    root.style.colorScheme = newTheme;\n    \n    setResolvedTheme(newTheme);\n  };\n\n  // Initialize theme\n  useEffect(() => {\n    const initialTheme = resolveTheme();\n    applyTheme(initialTheme);\n  }, []);\n\n  // Update theme when preference changes\n  useEffect(() => {\n    const newTheme = resolveTheme();\n    applyTheme(newTheme);\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        applyTheme(getSystemTheme());\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setTheme(current => {\n      if (current === 'light') return 'dark';\n      if (current === 'dark') return 'system';\n      return 'light';\n    });\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    resolvedTheme,\n    setTheme: handleSetTheme,\n    toggleTheme\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = React.useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}