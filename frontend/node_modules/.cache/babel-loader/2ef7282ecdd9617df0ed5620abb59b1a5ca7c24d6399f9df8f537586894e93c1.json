{"ast":null,"code":"import React from'react';import TaskItem from'../TaskItem/TaskItem';import LoadingSpinner from'../../common/LoadingSpinner/LoadingSpinner';import{classNames}from'../../../utils/helpers';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TaskList=_ref=>{let{tasks,loading=false,onTaskUpdate,onTaskDelete,emptyMessage='No tasks found',className=''}=_ref;if(loading){return/*#__PURE__*/_jsx(\"div\",{className:classNames('flex justify-center items-center py-12',className),children:/*#__PURE__*/_jsx(LoadingSpinner,{size:\"lg\",label:\"Loading tasks...\"})});}if(tasks.length===0){return/*#__PURE__*/_jsxs(\"div\",{className:classNames('text-center py-12',className),children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-500 text-lg mb-2\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 text-sm\",children:emptyMessage})]});}const handleToggleComplete=async(taskId,completed)=>{await onTaskUpdate(taskId,{completed});};const handleUpdateTask=async(taskId,updates)=>{await onTaskUpdate(taskId,updates);};const handleDeleteTask=async taskId=>{await onTaskDelete(taskId);};return/*#__PURE__*/_jsx(\"div\",{className:classNames('space-y-3',className),children:tasks.map(task=>/*#__PURE__*/_jsx(TaskItem,{task:task,onToggleComplete:handleToggleComplete,onUpdate:handleUpdateTask,onDelete:handleDeleteTask},task.id))});};export default TaskList;","map":{"version":3,"names":["React","TaskItem","LoadingSpinner","classNames","jsx","_jsx","jsxs","_jsxs","TaskList","_ref","tasks","loading","onTaskUpdate","onTaskDelete","emptyMessage","className","children","size","label","length","handleToggleComplete","taskId","completed","handleUpdateTask","updates","handleDeleteTask","map","task","onToggleComplete","onUpdate","onDelete","id"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/components/tasks/TaskList/TaskList.tsx"],"sourcesContent":["import React from 'react';\nimport { Task } from '../../../types/task';\nimport TaskItem from '../TaskItem/TaskItem';\nimport LoadingSpinner from '../../common/LoadingSpinner/LoadingSpinner';\nimport { classNames } from '../../../utils/helpers';\n\nexport interface TaskListProps {\n  tasks: Task[];\n  loading?: boolean;\n  onTaskUpdate: (taskId: string, updates: Partial<Task>) => Promise<void>;\n  onTaskDelete: (taskId: string) => Promise<void>;\n  emptyMessage?: string;\n  className?: string;\n}\n\nconst TaskList: React.FC<TaskListProps> = ({\n  tasks,\n  loading = false,\n  onTaskUpdate,\n  onTaskDelete,\n  emptyMessage = 'No tasks found',\n  className = '',\n}) => {\n  if (loading) {\n    return (\n      <div className={classNames('flex justify-center items-center py-12', className)}>\n        <LoadingSpinner size=\"lg\" label=\"Loading tasks...\" />\n      </div>\n    );\n  }\n\n  if (tasks.length === 0) {\n    return (\n      <div className={classNames('text-center py-12', className)}>\n        <div className=\"text-gray-500 text-lg mb-2\">ðŸ“‹</div>\n        <p className=\"text-gray-600 text-sm\">{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  const handleToggleComplete = async (taskId: string, completed: boolean) => {\n    await onTaskUpdate(taskId, { completed });\n  };\n\n  const handleUpdateTask = async (taskId: string, updates: Partial<Task>) => {\n    await onTaskUpdate(taskId, updates);\n  };\n\n  const handleDeleteTask = async (taskId: string) => {\n    await onTaskDelete(taskId);\n  };\n\n  return (\n    <div className={classNames('space-y-3', className)}>\n      {tasks.map((task) => (\n        <TaskItem\n          key={task.id}\n          task={task}\n          onToggleComplete={handleToggleComplete}\n          onUpdate={handleUpdateTask}\n          onDelete={handleDeleteTask}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TaskList;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,MAAO,CAAAC,QAAQ,KAAM,sBAAsB,CAC3C,MAAO,CAAAC,cAAc,KAAM,4CAA4C,CACvE,OAASC,UAAU,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAWpD,KAAM,CAAAC,QAAiC,CAAGC,IAAA,EAOpC,IAPqC,CACzCC,KAAK,CACLC,OAAO,CAAG,KAAK,CACfC,YAAY,CACZC,YAAY,CACZC,YAAY,CAAG,gBAAgB,CAC/BC,SAAS,CAAG,EACd,CAAC,CAAAN,IAAA,CACC,GAAIE,OAAO,CAAE,CACX,mBACEN,IAAA,QAAKU,SAAS,CAAEZ,UAAU,CAAC,wCAAwC,CAAEY,SAAS,CAAE,CAAAC,QAAA,cAC9EX,IAAA,CAACH,cAAc,EAACe,IAAI,CAAC,IAAI,CAACC,KAAK,CAAC,kBAAkB,CAAE,CAAC,CAClD,CAAC,CAEV,CAEA,GAAIR,KAAK,CAACS,MAAM,GAAK,CAAC,CAAE,CACtB,mBACEZ,KAAA,QAAKQ,SAAS,CAAEZ,UAAU,CAAC,mBAAmB,CAAEY,SAAS,CAAE,CAAAC,QAAA,eACzDX,IAAA,QAAKU,SAAS,CAAC,4BAA4B,CAAAC,QAAA,CAAC,cAAE,CAAK,CAAC,cACpDX,IAAA,MAAGU,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAEF,YAAY,CAAI,CAAC,EACpD,CAAC,CAEV,CAEA,KAAM,CAAAM,oBAAoB,CAAG,KAAAA,CAAOC,MAAc,CAAEC,SAAkB,GAAK,CACzE,KAAM,CAAAV,YAAY,CAACS,MAAM,CAAE,CAAEC,SAAU,CAAC,CAAC,CAC3C,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAOF,MAAc,CAAEG,OAAsB,GAAK,CACzE,KAAM,CAAAZ,YAAY,CAACS,MAAM,CAAEG,OAAO,CAAC,CACrC,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAJ,MAAc,EAAK,CACjD,KAAM,CAAAR,YAAY,CAACQ,MAAM,CAAC,CAC5B,CAAC,CAED,mBACEhB,IAAA,QAAKU,SAAS,CAAEZ,UAAU,CAAC,WAAW,CAAEY,SAAS,CAAE,CAAAC,QAAA,CAChDN,KAAK,CAACgB,GAAG,CAAEC,IAAI,eACdtB,IAAA,CAACJ,QAAQ,EAEP0B,IAAI,CAAEA,IAAK,CACXC,gBAAgB,CAAER,oBAAqB,CACvCS,QAAQ,CAAEN,gBAAiB,CAC3BO,QAAQ,CAAEL,gBAAiB,EAJtBE,IAAI,CAACI,EAKX,CACF,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}