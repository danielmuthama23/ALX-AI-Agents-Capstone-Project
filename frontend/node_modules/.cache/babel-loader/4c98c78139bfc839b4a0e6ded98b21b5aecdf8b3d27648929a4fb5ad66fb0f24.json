{"ast":null,"code":"import api from './api';\nclass TaskService {\n  async getTasks(params) {\n    const response = await api.get('/tasks', {\n      params\n    });\n    return response.data;\n  }\n  async getTask(taskId) {\n    const response = await api.get(`/tasks/${taskId}`);\n    return response.data;\n  }\n  async createTask(taskData) {\n    const response = await api.post('/tasks', taskData);\n    return response.data;\n  }\n  async updateTask(taskId, updates) {\n    const response = await api.put(`/tasks/${taskId}`, updates);\n    return response.data;\n  }\n  async deleteTask(taskId) {\n    await api.delete(`/tasks/${taskId}`);\n  }\n  async toggleTaskCompletion(taskId, completed) {\n    const response = await api.patch(`/tasks/${taskId}/toggle`, {\n      completed\n    });\n    return response.data;\n  }\n  async getTaskStats() {\n    const response = await api.get('/tasks/stats/overview');\n    return response.data;\n  }\n  async getDueSoonTasks() {\n    const response = await api.get('/tasks/due-soon');\n    return response.data;\n  }\n  async getOverdueTasks() {\n    const response = await api.get('/tasks/overdue');\n    return response.data;\n  }\n  async bulkUpdateTasks(taskIds, updates) {\n    const response = await api.patch('/tasks/bulk-update', {\n      taskIds,\n      updates\n    });\n    return response.data;\n  }\n  async exportTasks() {\n    const response = await api.get('/tasks/export', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n}\nexport const taskService = new TaskService();","map":{"version":3,"names":["api","TaskService","getTasks","params","response","get","data","getTask","taskId","createTask","taskData","post","updateTask","updates","put","deleteTask","delete","toggleTaskCompletion","completed","patch","getTaskStats","getDueSoonTasks","getOverdueTasks","bulkUpdateTasks","taskIds","exportTasks","responseType","taskService"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/services/tasks.ts"],"sourcesContent":["import api from './api';\nimport { Task, TaskPriority } from '../types/task';\n\nexport interface TasksResponse {\n  tasks: Task[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\nexport interface TaskStats {\n  total: number;\n  completed: number;\n  pending: number;\n  overdue: number;\n  dueSoon: number;\n  byPriority: Array<{ _id: string; count: number }>;\n  byCategory: Array<{ _id: string; count: number }>;\n  insights: string;\n}\n\nclass TaskService {\n  async getTasks(params?: {\n    page?: number;\n    limit?: number;\n    completed?: boolean;\n    category?: string;\n    priority?: TaskPriority;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<TasksResponse> {\n    const response = await api.get<TasksResponse>('/tasks', { params });\n    return response.data;\n  }\n\n  async getTask(taskId: string): Promise<Task> {\n    const response = await api.get<Task>(`/tasks/${taskId}`);\n    return response.data;\n  }\n\n  async createTask(taskData: Partial<Task>): Promise<Task> {\n    const response = await api.post<Task>('/tasks', taskData);\n    return response.data;\n  }\n\n  async updateTask(taskId: string, updates: Partial<Task>): Promise<Task> {\n    const response = await api.put<Task>(`/tasks/${taskId}`, updates);\n    return response.data;\n  }\n\n  async deleteTask(taskId: string): Promise<void> {\n    await api.delete(`/tasks/${taskId}`);\n  }\n\n  async toggleTaskCompletion(taskId: string, completed: boolean): Promise<Task> {\n    const response = await api.patch<Task>(`/tasks/${taskId}/toggle`, { completed });\n    return response.data;\n  }\n\n  async getTaskStats(): Promise<TaskStats> {\n    const response = await api.get<TaskStats>('/tasks/stats/overview');\n    return response.data;\n  }\n\n  async getDueSoonTasks(): Promise<Task[]> {\n    const response = await api.get<Task[]>('/tasks/due-soon');\n    return response.data;\n  }\n\n  async getOverdueTasks(): Promise<Task[]> {\n    const response = await api.get<Task[]>('/tasks/overdue');\n    return response.data;\n  }\n\n  async bulkUpdateTasks(taskIds: string[], updates: Partial<Task>): Promise<{ modifiedCount: number }> {\n    const response = await api.patch<{ modifiedCount: number }>('/tasks/bulk-update', {\n      taskIds,\n      updates\n    });\n    return response.data;\n  }\n\n  async exportTasks(): Promise<Blob> {\n    const response = await api.get('/tasks/export', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n}\n\nexport const taskService = new TaskService();"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAwBvB,MAAMC,WAAW,CAAC;EAChB,MAAMC,QAAQA,CAACC,MASd,EAA0B;IACzB,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAgB,QAAQ,EAAE;MAAEF;IAAO,CAAC,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,OAAOA,CAACC,MAAc,EAAiB;IAC3C,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAO,UAAUG,MAAM,EAAE,CAAC;IACxD,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMG,UAAUA,CAACC,QAAuB,EAAiB;IACvD,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACW,IAAI,CAAO,QAAQ,EAAED,QAAQ,CAAC;IACzD,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMM,UAAUA,CAACJ,MAAc,EAAEK,OAAsB,EAAiB;IACtE,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACc,GAAG,CAAO,UAAUN,MAAM,EAAE,EAAEK,OAAO,CAAC;IACjE,OAAOT,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMS,UAAUA,CAACP,MAAc,EAAiB;IAC9C,MAAMR,GAAG,CAACgB,MAAM,CAAC,UAAUR,MAAM,EAAE,CAAC;EACtC;EAEA,MAAMS,oBAAoBA,CAACT,MAAc,EAAEU,SAAkB,EAAiB;IAC5E,MAAMd,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,KAAK,CAAO,UAAUX,MAAM,SAAS,EAAE;MAAEU;IAAU,CAAC,CAAC;IAChF,OAAOd,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMc,YAAYA,CAAA,EAAuB;IACvC,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAY,uBAAuB,CAAC;IAClE,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMe,eAAeA,CAAA,EAAoB;IACvC,MAAMjB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAS,iBAAiB,CAAC;IACzD,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMgB,eAAeA,CAAA,EAAoB;IACvC,MAAMlB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAS,gBAAgB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMiB,eAAeA,CAACC,OAAiB,EAAEX,OAAsB,EAAsC;IACnG,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,KAAK,CAA4B,oBAAoB,EAAE;MAChFK,OAAO;MACPX;IACF,CAAC,CAAC;IACF,OAAOT,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMmB,WAAWA,CAAA,EAAkB;IACjC,MAAMrB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,eAAe,EAAE;MAC9CqB,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOtB,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,OAAO,MAAMqB,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}