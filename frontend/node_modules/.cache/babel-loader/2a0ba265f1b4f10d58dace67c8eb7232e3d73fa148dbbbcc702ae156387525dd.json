{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useLocalStorage('theme', 'system');\n  const [resolvedTheme, setResolvedTheme] = useState('light');\n\n  // Get system preference\n  const getSystemTheme = () => {\n    if (typeof window === 'undefined') return 'light';\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n\n  // Resolve theme based on preference\n  const resolveTheme = React.useCallback(() => {\n    if (theme === 'system') {\n      return getSystemTheme();\n    }\n    return theme;\n  }, [theme]);\n\n  // Apply theme to document\n  const applyTheme = newTheme => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(newTheme);\n    root.style.colorScheme = newTheme;\n    setResolvedTheme(newTheme);\n  };\n\n  // Initialize theme\n  useEffect(() => {\n    const initialTheme = resolveTheme();\n    applyTheme(initialTheme);\n  }, [resolveTheme]);\n\n  // Update theme when preference changes\n  useEffect(() => {\n    const newTheme = resolveTheme();\n    applyTheme(newTheme);\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        applyTheme(getSystemTheme());\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme, resolveTheme]);\n  const handleSetTheme = newTheme => {\n    setTheme(newTheme);\n  };\n  const toggleTheme = () => {\n    setTheme(current => {\n      if (current === 'light') return 'dark';\n      if (current === 'dark') return 'system';\n      return 'light';\n    });\n  };\n  const value = {\n    theme,\n    resolvedTheme,\n    setTheme: handleSetTheme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"K4/TEHYZQc8mjFcP/3pAaS95pBg=\", false, function () {\n  return [useLocalStorage];\n});\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = React.useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useLocalStorage","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","resolvedTheme","setResolvedTheme","getSystemTheme","window","matchMedia","matches","resolveTheme","useCallback","applyTheme","newTheme","root","document","documentElement","classList","remove","add","style","colorScheme","initialTheme","mediaQuery","handleChange","addEventListener","removeEventListener","handleSetTheme","toggleTheme","current","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","useContext","Error","$RefreshReg$"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\nexport type Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  resolvedTheme: 'light' | 'dark';\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useLocalStorage<Theme>('theme', 'system');\n  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');\n\n  // Get system preference\n  const getSystemTheme = (): 'light' | 'dark' => {\n    if (typeof window === 'undefined') return 'light';\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n\n  // Resolve theme based on preference\n  const resolveTheme = React.useCallback((): 'light' | 'dark' => {\n    if (theme === 'system') {\n      return getSystemTheme();\n    }\n    return theme;\n  }, [theme]);\n\n  // Apply theme to document\n  const applyTheme = (newTheme: 'light' | 'dark') => {\n    const root = window.document.documentElement;\n    \n    root.classList.remove('light', 'dark');\n    root.classList.add(newTheme);\n    root.style.colorScheme = newTheme;\n    \n    setResolvedTheme(newTheme);\n  };\n\n  // Initialize theme\n  useEffect(() => {\n    const initialTheme = resolveTheme();\n    applyTheme(initialTheme);\n  }, [resolveTheme]);\n\n  // Update theme when preference changes\n  useEffect(() => {\n    const newTheme = resolveTheme();\n    applyTheme(newTheme);\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        applyTheme(getSystemTheme());\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme, resolveTheme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setTheme(current => {\n      if (current === 'light') return 'dark';\n      if (current === 'dark') return 'system';\n      return 'light';\n    });\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    resolvedTheme,\n    setTheme: handleSetTheme,\n    toggleTheme\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = React.useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}