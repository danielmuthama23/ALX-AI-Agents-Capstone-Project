{"ast":null,"code":"import api from'./api';class AuthService{async login(credentials){const response=await api.post('/auth/login',credentials);if(response.data.token){localStorage.setItem('token',response.data.token);}return response.data;}async register(userData){const response=await api.post('/auth/register',userData);if(response.data.token){localStorage.setItem('token',response.data.token);}return response.data;}async logout(){localStorage.removeItem('token');await api.post('/auth/logout');}async getProfile(){const response=await api.get('/auth/me');return response.data;}async updateProfile(updates){const response=await api.put('/auth/profile',updates);return response.data;}async changePassword(passwords){await api.put('/auth/password',passwords);}async checkEmailAvailability(email){const response=await api.get(\"/auth/check-email?email=\".concat(email));return response.data.available;}async checkUsernameAvailability(username){const response=await api.get(\"/auth/check-username?username=\".concat(username));return response.data.available;}// Utility method to check if user is authenticated\nisAuthenticated(){const token=localStorage.getItem('token');return!!token;}// Utility method to get stored token\ngetToken(){return localStorage.getItem('token');}}export const authService=new AuthService();","map":{"version":3,"names":["api","AuthService","login","credentials","response","post","data","token","localStorage","setItem","register","userData","logout","removeItem","getProfile","get","updateProfile","updates","put","changePassword","passwords","checkEmailAvailability","email","concat","available","checkUsernameAvailability","username","isAuthenticated","getItem","getToken","authService"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/services/auth.ts"],"sourcesContent":["import api from './api';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n  };\n}\n\nexport interface UserProfile {\n  id: string;\n  username: string;\n  email: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await api.post<AuthResponse>('/auth/login', credentials);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    \n    return response.data;\n  }\n\n  async register(userData: RegisterData): Promise<AuthResponse> {\n    const response = await api.post<AuthResponse>('/auth/register', userData);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    \n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    localStorage.removeItem('token');\n    await api.post('/auth/logout');\n  }\n\n  async getProfile(): Promise<UserProfile> {\n    const response = await api.get<UserProfile>('/auth/me');\n    return response.data;\n  }\n\n  async updateProfile(updates: Partial<{ username: string; email: string }>): Promise<UserProfile> {\n    const response = await api.put<UserProfile>('/auth/profile', updates);\n    return response.data;\n  }\n\n  async changePassword(passwords: { currentPassword: string; newPassword: string }): Promise<void> {\n    await api.put('/auth/password', passwords);\n  }\n\n  async checkEmailAvailability(email: string): Promise<boolean> {\n    const response = await api.get<{ available: boolean }>(`/auth/check-email?email=${email}`);\n    return response.data.available;\n  }\n\n  async checkUsernameAvailability(username: string): Promise<boolean> {\n    const response = await api.get<{ available: boolean }>(`/auth/check-username?username=${username}`);\n    return response.data.available;\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  // Utility method to get stored token\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CA8BvB,KAAM,CAAAC,WAAY,CAChB,KAAM,CAAAC,KAAKA,CAACC,WAA6B,CAAyB,CAChE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAe,aAAa,CAAEF,WAAW,CAAC,CAEzE,GAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAE,CACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CACpD,CAEA,MAAO,CAAAH,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAI,QAAQA,CAACC,QAAsB,CAAyB,CAC5D,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAe,gBAAgB,CAAEM,QAAQ,CAAC,CAEzE,GAAIP,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAE,CACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CACpD,CAEA,MAAO,CAAAH,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAM,MAAMA,CAAA,CAAkB,CAC5BJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC,CAChC,KAAM,CAAAb,GAAG,CAACK,IAAI,CAAC,cAAc,CAAC,CAChC,CAEA,KAAM,CAAAS,UAAUA,CAAA,CAAyB,CACvC,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACe,GAAG,CAAc,UAAU,CAAC,CACvD,MAAO,CAAAX,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAU,aAAaA,CAACC,OAAqD,CAAwB,CAC/F,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACkB,GAAG,CAAc,eAAe,CAAED,OAAO,CAAC,CACrE,MAAO,CAAAb,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAa,cAAcA,CAACC,SAA2D,CAAiB,CAC/F,KAAM,CAAApB,GAAG,CAACkB,GAAG,CAAC,gBAAgB,CAAEE,SAAS,CAAC,CAC5C,CAEA,KAAM,CAAAC,sBAAsBA,CAACC,KAAa,CAAoB,CAC5D,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACe,GAAG,4BAAAQ,MAAA,CAAoDD,KAAK,CAAE,CAAC,CAC1F,MAAO,CAAAlB,QAAQ,CAACE,IAAI,CAACkB,SAAS,CAChC,CAEA,KAAM,CAAAC,yBAAyBA,CAACC,QAAgB,CAAoB,CAClE,KAAM,CAAAtB,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACe,GAAG,kCAAAQ,MAAA,CAA0DG,QAAQ,CAAE,CAAC,CACnG,MAAO,CAAAtB,QAAQ,CAACE,IAAI,CAACkB,SAAS,CAChC,CAEA;AACAG,eAAeA,CAAA,CAAY,CACzB,KAAM,CAAApB,KAAK,CAAGC,YAAY,CAACoB,OAAO,CAAC,OAAO,CAAC,CAC3C,MAAO,CAAC,CAACrB,KAAK,CAChB,CAEA;AACAsB,QAAQA,CAAA,CAAkB,CACxB,MAAO,CAAArB,YAAY,CAACoB,OAAO,CAAC,OAAO,CAAC,CACtC,CACF,CAEA,MAAO,MAAM,CAAAE,WAAW,CAAG,GAAI,CAAA7B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}