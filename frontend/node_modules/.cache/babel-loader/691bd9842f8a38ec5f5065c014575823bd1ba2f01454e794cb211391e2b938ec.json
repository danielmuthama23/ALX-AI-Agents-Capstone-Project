{"ast":null,"code":"import _objectSpread from\"/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{taskService}from'../services/tasks';import{useAuth}from'./useAuth';export const useTasks=function(){let initialFilters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const[tasks,setTasks]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[filters,setFilters]=useState(initialFilters);const[pagination,setPagination]=useState({page:1,limit:10,total:0,totalPages:0});const[stats,setStats]=useState({total:0,completed:0,pending:0,overdue:0,dueSoon:0,completionRate:0,byPriority:[],byCategory:[],insights:''});const{user}=useAuth();const fetchTasks=useCallback(async()=>{if(!user)return;try{setLoading(true);setError(null);const response=await taskService.getTasks(_objectSpread(_objectSpread({},filters),{},{page:pagination.page,limit:pagination.limit}));setTasks(response.tasks);setPagination({page:response.pagination.page,limit:response.pagination.limit,total:response.pagination.total,totalPages:response.pagination.totalPages});}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Failed to fetch tasks');console.error('Error fetching tasks:',err);}finally{setLoading(false);}},[user,filters,pagination.page,pagination.limit]);const fetchStats=useCallback(async()=>{if(!user)return;try{const statsData=await taskService.getTaskStats();const completionRate=statsData.total>0?statsData.completed/statsData.total*100:0;setStats(_objectSpread(_objectSpread({},statsData),{},{completionRate}));}catch(err){console.error('Error fetching stats:',err);}},[user]);useEffect(()=>{fetchTasks();fetchStats();},[fetchTasks,fetchStats]);const createTask=async taskData=>{try{const newTask=await taskService.createTask(taskData);setTasks(prev=>[newTask,...prev]);// Update stats after creating a task\nawait fetchStats();}catch(err){var _err$response2,_err$response2$data;throw new Error(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to create task');}};const updateTask=async(taskId,updates)=>{try{const updatedTask=await taskService.updateTask(taskId,updates);setTasks(prev=>prev.map(task=>task.id===taskId?_objectSpread(_objectSpread({},task),updatedTask):task));// Update stats after updating a task\nawait fetchStats();}catch(err){var _err$response3,_err$response3$data;throw new Error(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||'Failed to update task');}};const deleteTask=async taskId=>{try{await taskService.deleteTask(taskId);setTasks(prev=>prev.filter(task=>task.id!==taskId));// Update stats after deleting a task\nawait fetchStats();}catch(err){var _err$response4,_err$response4$data;throw new Error(((_err$response4=err.response)===null||_err$response4===void 0?void 0:(_err$response4$data=_err$response4.data)===null||_err$response4$data===void 0?void 0:_err$response4$data.message)||'Failed to delete task');}};const toggleTaskCompletion=async(taskId,completed)=>{try{const updatedTask=await taskService.updateTask(taskId,{completed});setTasks(prev=>prev.map(task=>task.id===taskId?_objectSpread(_objectSpread({},task),updatedTask):task));// Update stats after toggling completion\nawait fetchStats();}catch(err){var _err$response5,_err$response5$data;throw new Error(((_err$response5=err.response)===null||_err$response5===void 0?void 0:(_err$response5$data=_err$response5.data)===null||_err$response5$data===void 0?void 0:_err$response5$data.message)||'Failed to update task');}};const setPage=page=>{setPagination(prev=>_objectSpread(_objectSpread({},prev),{},{page}));};const setLimit=limit=>{setPagination(prev=>_objectSpread(_objectSpread({},prev),{},{limit,page:1}));// Reset to first page when changing limit\n};const refetch=async()=>{await fetchTasks();await fetchStats();};return{tasks,loading,error,filters,pagination,stats,createTask,updateTask,deleteTask,toggleTaskCompletion,setFilters,setPage,setLimit,refetch};};","map":{"version":3,"names":["useState","useEffect","useCallback","taskService","useAuth","useTasks","initialFilters","arguments","length","undefined","tasks","setTasks","loading","setLoading","error","setError","filters","setFilters","pagination","setPagination","page","limit","total","totalPages","stats","setStats","completed","pending","overdue","dueSoon","completionRate","byPriority","byCategory","insights","user","fetchTasks","response","getTasks","_objectSpread","err","_err$response","_err$response$data","data","message","console","fetchStats","statsData","getTaskStats","createTask","taskData","newTask","prev","_err$response2","_err$response2$data","Error","updateTask","taskId","updates","updatedTask","map","task","id","_err$response3","_err$response3$data","deleteTask","filter","_err$response4","_err$response4$data","toggleTaskCompletion","_err$response5","_err$response5$data","setPage","setLimit","refetch"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Task, TaskPriority, TaskStatus, TaskFilters } from '../types/task';\nimport { taskService } from '../services/tasks';\nimport { useAuth } from './useAuth';\n\ninterface UseTasksReturn {\n  tasks: Task[];\n  loading: boolean;\n  error: string | null;\n  filters: TaskFilters;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n  stats: {\n    total: number;\n    completed: number;\n    pending: number;\n    overdue: number;\n    dueSoon: number;\n    completionRate: number;\n    byPriority: Array<{ _id: string; count: number }>;\n    byCategory: Array<{ _id: string; count: number }>;\n    insights: string;\n  };\n  createTask: (taskData: Partial<Task>) => Promise<void>;\n  updateTask: (taskId: string, updates: Partial<Task>) => Promise<void>;\n  deleteTask: (taskId: string) => Promise<void>;\n  toggleTaskCompletion: (taskId: string, completed: boolean) => Promise<void>;\n  setFilters: (filters: TaskFilters) => void;\n  setPage: (page: number) => void;\n  setLimit: (limit: number) => void;\n  refetch: () => Promise<void>;\n}\n\nexport const useTasks = (initialFilters: TaskFilters = {}): UseTasksReturn => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<TaskFilters>(initialFilters);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  });\n  const [stats, setStats] = useState({\n    total: 0,\n    completed: 0,\n    pending: 0,\n    overdue: 0,\n    dueSoon: 0,\n    completionRate: 0,\n    byPriority: [] as Array<{ _id: string; count: number }>,\n    byCategory: [] as Array<{ _id: string; count: number }>,\n    insights: ''\n  });\n\n  const { user } = useAuth();\n\n  const fetchTasks = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await taskService.getTasks({\n        ...filters,\n        page: pagination.page,\n        limit: pagination.limit\n      });\n\n      setTasks(response.tasks);\n      setPagination({\n        page: response.pagination.page,\n        limit: response.pagination.limit,\n        total: response.pagination.total,\n        totalPages: response.pagination.totalPages\n      });\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to fetch tasks');\n      console.error('Error fetching tasks:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, filters, pagination.page, pagination.limit]);\n\n  const fetchStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const statsData = await taskService.getTaskStats();\n      const completionRate = statsData.total > 0 ? (statsData.completed / statsData.total) * 100 : 0;\n      setStats({\n        ...statsData,\n        completionRate\n      });\n    } catch (err: any) {\n      console.error('Error fetching stats:', err);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    fetchTasks();\n    fetchStats();\n  }, [fetchTasks, fetchStats]);\n\n  const createTask = async (taskData: Partial<Task>): Promise<void> => {\n    try {\n      const newTask = await taskService.createTask(taskData);\n      setTasks(prev => [newTask, ...prev]);\n      \n      // Update stats after creating a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to create task');\n    }\n  };\n\n  const updateTask = async (taskId: string, updates: Partial<Task>): Promise<void> => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, updates);\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n      \n      // Update stats after updating a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to update task');\n    }\n  };\n\n  const deleteTask = async (taskId: string): Promise<void> => {\n    try {\n      await taskService.deleteTask(taskId);\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n      \n      // Update stats after deleting a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to delete task');\n    }\n  };\n\n  const toggleTaskCompletion = async (taskId: string, completed: boolean): Promise<void> => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, { completed });\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n      \n      // Update stats after toggling completion\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to update task');\n    }\n  };\n\n  const setPage = (page: number) => {\n    setPagination(prev => ({ ...prev, page }));\n  };\n\n  const setLimit = (limit: number) => {\n    setPagination(prev => ({ ...prev, limit, page: 1 })); // Reset to first page when changing limit\n  };\n\n  const refetch = async (): Promise<void> => {\n    await fetchTasks();\n    await fetchStats();\n  };\n\n  return {\n    tasks,\n    loading,\n    error,\n    filters,\n    pagination,\n    stats,\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTaskCompletion,\n    setFilters,\n    setPage,\n    setLimit,\n    refetch\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}