{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { taskService } from '../services/tasks';\nimport { useAuth } from './useAuth';\nexport const useTasks = (initialFilters = {}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filters, setFilters] = useState(initialFilters);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  });\n  const [stats, setStats] = useState({\n    total: 0,\n    completed: 0,\n    pending: 0,\n    overdue: 0,\n    dueSoon: 0,\n    completionRate: 0,\n    byPriority: [],\n    byCategory: [],\n    insights: ''\n  });\n  const {\n    user\n  } = useAuth();\n  const fetchTasks = useCallback(async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await taskService.getTasks({\n        ...filters,\n        page: pagination.page,\n        limit: pagination.limit\n      });\n      setTasks(response.tasks);\n      setPagination({\n        page: response.pagination.page,\n        limit: response.pagination.limit,\n        total: response.pagination.total,\n        totalPages: response.pagination.totalPages\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch tasks');\n      console.error('Error fetching tasks:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, filters, pagination.page, pagination.limit]);\n  const fetchStats = useCallback(async () => {\n    if (!user) return;\n    try {\n      const statsData = await taskService.getTaskStats();\n      const completionRate = statsData.total > 0 ? statsData.completed / statsData.total * 100 : 0;\n      setStats({\n        ...statsData,\n        completionRate\n      });\n    } catch (err) {\n      console.error('Error fetching stats:', err);\n    }\n  }, [user]);\n  useEffect(() => {\n    fetchTasks();\n    fetchStats();\n  }, [fetchTasks, fetchStats]);\n  const createTask = async taskData => {\n    try {\n      const newTask = await taskService.createTask(taskData);\n      setTasks(prev => [newTask, ...prev]);\n\n      // Update stats after creating a task\n      await fetchStats();\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      throw new Error(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to create task');\n    }\n  };\n  const updateTask = async (taskId, updates) => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, updates);\n      setTasks(prev => prev.map(task => task.id === taskId ? {\n        ...task,\n        ...updatedTask\n      } : task));\n\n      // Update stats after updating a task\n      await fetchStats();\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      throw new Error(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to update task');\n    }\n  };\n  const deleteTask = async taskId => {\n    try {\n      await taskService.deleteTask(taskId);\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n\n      // Update stats after deleting a task\n      await fetchStats();\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      throw new Error(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to delete task');\n    }\n  };\n  const toggleTaskCompletion = async (taskId, completed) => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, {\n        completed\n      });\n      setTasks(prev => prev.map(task => task.id === taskId ? {\n        ...task,\n        ...updatedTask\n      } : task));\n\n      // Update stats after toggling completion\n      await fetchStats();\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      throw new Error(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Failed to update task');\n    }\n  };\n  const setPage = page => {\n    setPagination(prev => ({\n      ...prev,\n      page\n    }));\n  };\n  const setLimit = limit => {\n    setPagination(prev => ({\n      ...prev,\n      limit,\n      page: 1\n    })); // Reset to first page when changing limit\n  };\n  const refetch = async () => {\n    await fetchTasks();\n    await fetchStats();\n  };\n  return {\n    tasks,\n    loading,\n    error,\n    filters,\n    pagination,\n    stats,\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTaskCompletion,\n    setFilters,\n    setPage,\n    setLimit,\n    refetch\n  };\n};\n_s(useTasks, \"i2vpLw3v8coM5XTl4RvVSnqAhVQ=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","taskService","useAuth","useTasks","initialFilters","_s","tasks","setTasks","loading","setLoading","error","setError","filters","setFilters","pagination","setPagination","page","limit","total","totalPages","stats","setStats","completed","pending","overdue","dueSoon","completionRate","byPriority","byCategory","insights","user","fetchTasks","response","getTasks","err","_err$response","_err$response$data","data","message","console","fetchStats","statsData","getTaskStats","createTask","taskData","newTask","prev","_err$response2","_err$response2$data","Error","updateTask","taskId","updates","updatedTask","map","task","id","_err$response3","_err$response3$data","deleteTask","filter","_err$response4","_err$response4$data","toggleTaskCompletion","_err$response5","_err$response5$data","setPage","setLimit","refetch"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/hooks/useTasks.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Task, TaskFilters } from '../types/task';\nimport { taskService } from '../services/tasks';\nimport { useAuth } from './useAuth';\n\ninterface UseTasksReturn {\n  tasks: Task[];\n  loading: boolean;\n  error: string | null;\n  filters: TaskFilters;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n  stats: {\n    total: number;\n    completed: number;\n    pending: number;\n    overdue: number;\n    dueSoon: number;\n    completionRate: number;\n    byPriority: Array<{ _id: string; count: number }>;\n    byCategory: Array<{ _id: string; count: number }>;\n    insights: string;\n  };\n  createTask: (taskData: Partial<Task>) => Promise<void>;\n  updateTask: (taskId: string, updates: Partial<Task>) => Promise<void>;\n  deleteTask: (taskId: string) => Promise<void>;\n  toggleTaskCompletion: (taskId: string, completed: boolean) => Promise<void>;\n  setFilters: (filters: TaskFilters) => void;\n  setPage: (page: number) => void;\n  setLimit: (limit: number) => void;\n  refetch: () => Promise<void>;\n}\n\nexport const useTasks = (initialFilters: TaskFilters = {}): UseTasksReturn => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<TaskFilters>(initialFilters);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  });\n  const [stats, setStats] = useState({\n    total: 0,\n    completed: 0,\n    pending: 0,\n    overdue: 0,\n    dueSoon: 0,\n    completionRate: 0,\n    byPriority: [] as Array<{ _id: string; count: number }>,\n    byCategory: [] as Array<{ _id: string; count: number }>,\n    insights: ''\n  });\n\n  const { user } = useAuth();\n\n  const fetchTasks = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await taskService.getTasks({\n        ...filters,\n        page: pagination.page,\n        limit: pagination.limit\n      });\n\n      setTasks(response.tasks);\n      setPagination({\n        page: response.pagination.page,\n        limit: response.pagination.limit,\n        total: response.pagination.total,\n        totalPages: response.pagination.totalPages\n      });\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to fetch tasks');\n      console.error('Error fetching tasks:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, filters, pagination.page, pagination.limit]);\n\n  const fetchStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const statsData = await taskService.getTaskStats();\n      const completionRate = statsData.total > 0 ? (statsData.completed / statsData.total) * 100 : 0;\n      setStats({\n        ...statsData,\n        completionRate\n      });\n    } catch (err: any) {\n      console.error('Error fetching stats:', err);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    fetchTasks();\n    fetchStats();\n  }, [fetchTasks, fetchStats]);\n\n  const createTask = async (taskData: Partial<Task>): Promise<void> => {\n    try {\n      const newTask = await taskService.createTask(taskData);\n      setTasks(prev => [newTask, ...prev]);\n      \n      // Update stats after creating a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to create task');\n    }\n  };\n\n  const updateTask = async (taskId: string, updates: Partial<Task>): Promise<void> => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, updates);\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n      \n      // Update stats after updating a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to update task');\n    }\n  };\n\n  const deleteTask = async (taskId: string): Promise<void> => {\n    try {\n      await taskService.deleteTask(taskId);\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n      \n      // Update stats after deleting a task\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to delete task');\n    }\n  };\n\n  const toggleTaskCompletion = async (taskId: string, completed: boolean): Promise<void> => {\n    try {\n      const updatedTask = await taskService.updateTask(taskId, { completed });\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n      \n      // Update stats after toggling completion\n      await fetchStats();\n    } catch (err: any) {\n      throw new Error(err.response?.data?.message || 'Failed to update task');\n    }\n  };\n\n  const setPage = (page: number) => {\n    setPagination(prev => ({ ...prev, page }));\n  };\n\n  const setLimit = (limit: number) => {\n    setPagination(prev => ({ ...prev, limit, page: 1 })); // Reset to first page when changing limit\n  };\n\n  const refetch = async (): Promise<void> => {\n    await fetchTasks();\n    await fetchStats();\n  };\n\n  return {\n    tasks,\n    loading,\n    error,\n    filters,\n    pagination,\n    stats,\n    createTask,\n    updateTask,\n    deleteTask,\n    toggleTaskCompletion,\n    setFilters,\n    setPage,\n    setLimit,\n    refetch\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}