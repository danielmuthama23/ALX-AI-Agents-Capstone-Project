{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token && authService.isAuthenticated()) {\n        try {\n          const userProfile = await authService.getProfile();\n          setUser(userProfile);\n        } catch (error) {\n          console.error('Failed to fetch user profile:', error);\n          localStorage.removeItem('token');\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      await authService.login({\n        email,\n        password\n      });\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      await authService.register({\n        username,\n        email,\n        password\n      });\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed');\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('token');\n    }\n  };\n  const updateProfile = async updates => {\n    try {\n      const updatedProfile = await authService.updateProfile(updates);\n      setUser(updatedProfile);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed');\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","initAuth","token","localStorage","getItem","isAuthenticated","userProfile","getProfile","error","console","removeItem","login","email","password","_error$response","_error$response$data","Error","response","data","message","register","username","_error$response2","_error$response2$data","logout","updateProfile","updates","updatedProfile","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport { authService } from '../services/auth';\nimport { UserProfile } from '../services/auth';\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateProfile: (updates: Partial<UserProfile>) => Promise<void>;\n  isAuthenticated: boolean;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      \n      if (token && authService.isAuthenticated()) {\n        try {\n          const userProfile = await authService.getProfile();\n          setUser(userProfile);\n        } catch (error) {\n          console.error('Failed to fetch user profile:', error);\n          localStorage.removeItem('token');\n        }\n      }\n      \n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      await authService.login({ email, password });\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  };\n\n  const register = async (username: string, email: string, password: string): Promise<void> => {\n    try {\n      await authService.register({ username, email, password });\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('token');\n    }\n  };\n\n  const updateProfile = async (updates: Partial<UserProfile>): Promise<void> => {\n    try {\n      const updatedProfile = await authService.updateProfile(updates);\n      setUser(updatedProfile);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Profile update failed');\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}