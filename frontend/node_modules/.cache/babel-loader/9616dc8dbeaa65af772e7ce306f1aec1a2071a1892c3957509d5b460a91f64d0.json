{"ast":null,"code":"import api from './api';\nclass AuthService {\n  async login(credentials) {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  }\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  }\n  async logout() {\n    localStorage.removeItem('token');\n    await api.post('/auth/logout');\n  }\n  async getProfile() {\n    const response = await api.get('/auth/me');\n    return response.data;\n  }\n  async updateProfile(updates) {\n    const response = await api.put('/auth/profile', updates);\n    return response.data;\n  }\n  async changePassword(passwords) {\n    await api.put('/auth/password', passwords);\n  }\n  async checkEmailAvailability(email) {\n    const response = await api.get(`/auth/check-email?email=${email}`);\n    return response.data.available;\n  }\n  async checkUsernameAvailability(username) {\n    const response = await api.get(`/auth/check-username?username=${username}`);\n    return response.data.available;\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  // Utility method to get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["api","AuthService","login","credentials","response","post","data","token","localStorage","setItem","register","userData","logout","removeItem","getProfile","get","updateProfile","updates","put","changePassword","passwords","checkEmailAvailability","email","available","checkUsernameAvailability","username","isAuthenticated","getItem","getToken","authService"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/services/auth.ts"],"sourcesContent":["import api from './api';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n  };\n}\n\nexport interface UserProfile {\n  id: string;\n  username: string;\n  email: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await api.post<AuthResponse>('/auth/login', credentials);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    \n    return response.data;\n  }\n\n  async register(userData: RegisterData): Promise<AuthResponse> {\n    const response = await api.post<AuthResponse>('/auth/register', userData);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    \n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    localStorage.removeItem('token');\n    await api.post('/auth/logout');\n  }\n\n  async getProfile(): Promise<UserProfile> {\n    const response = await api.get<UserProfile>('/auth/me');\n    return response.data;\n  }\n\n  async updateProfile(updates: Partial<{ username: string; email: string }>): Promise<UserProfile> {\n    const response = await api.put<UserProfile>('/auth/profile', updates);\n    return response.data;\n  }\n\n  async changePassword(passwords: { currentPassword: string; newPassword: string }): Promise<void> {\n    await api.put('/auth/password', passwords);\n  }\n\n  async checkEmailAvailability(email: string): Promise<boolean> {\n    const response = await api.get<{ available: boolean }>(`/auth/check-email?email=${email}`);\n    return response.data.available;\n  }\n\n  async checkUsernameAvailability(username: string): Promise<boolean> {\n    const response = await api.get<{ available: boolean }>(`/auth/check-username?username=${username}`);\n    return response.data.available;\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  // Utility method to get stored token\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AA8BvB,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAA6B,EAAyB;IAChE,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAe,aAAa,EAAEF,WAAW,CAAC;IAEzE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IAEA,OAAOH,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMI,QAAQA,CAACC,QAAsB,EAAyB;IAC5D,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAe,gBAAgB,EAAEM,QAAQ,CAAC;IAEzE,IAAIP,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IAEA,OAAOH,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMM,MAAMA,CAAA,EAAkB;IAC5BJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChC,MAAMb,GAAG,CAACK,IAAI,CAAC,cAAc,CAAC;EAChC;EAEA,MAAMS,UAAUA,CAAA,EAAyB;IACvC,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,GAAG,CAAc,UAAU,CAAC;IACvD,OAAOX,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMU,aAAaA,CAACC,OAAqD,EAAwB;IAC/F,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAc,eAAe,EAAED,OAAO,CAAC;IACrE,OAAOb,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMa,cAAcA,CAACC,SAA2D,EAAiB;IAC/F,MAAMpB,GAAG,CAACkB,GAAG,CAAC,gBAAgB,EAAEE,SAAS,CAAC;EAC5C;EAEA,MAAMC,sBAAsBA,CAACC,KAAa,EAAoB;IAC5D,MAAMlB,QAAQ,GAAG,MAAMJ,GAAG,CAACe,GAAG,CAAyB,2BAA2BO,KAAK,EAAE,CAAC;IAC1F,OAAOlB,QAAQ,CAACE,IAAI,CAACiB,SAAS;EAChC;EAEA,MAAMC,yBAAyBA,CAACC,QAAgB,EAAoB;IAClE,MAAMrB,QAAQ,GAAG,MAAMJ,GAAG,CAACe,GAAG,CAAyB,iCAAiCU,QAAQ,EAAE,CAAC;IACnG,OAAOrB,QAAQ,CAACE,IAAI,CAACiB,SAAS;EAChC;;EAEA;EACAG,eAAeA,CAAA,EAAY;IACzB,MAAMnB,KAAK,GAAGC,YAAY,CAACmB,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACpB,KAAK;EAChB;;EAEA;EACAqB,QAAQA,CAAA,EAAkB;IACxB,OAAOpB,YAAY,CAACmB,OAAO,CAAC,OAAO,CAAC;EACtC;AACF;AAEA,OAAO,MAAME,WAAW,GAAG,IAAI5B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}