{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  const [storedValue, setStoredValue] = useState(initialValue);\n\n  // Read from localStorage on initial render\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        setStoredValue(JSON.parse(item));\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"fIWh0yMiN4KpXbSVauF2DSPG7i4=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = <T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((val: T) => T)) => void] => {\n  const [storedValue, setStoredValue] = useState<T>(initialValue);\n\n  // Read from localStorage on initial render\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        setStoredValue(JSON.parse(item));\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,eAAe,GAAGA,CAC7BC,GAAW,EACXC,YAAe,KAC+B;EAAAC,EAAA;EAC9C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAII,YAAY,CAAC;;EAE/D;EACAH,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMO,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,IAAIK,IAAI,EAAE;QACRD,cAAc,CAACK,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAC;MAClC;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;IAClE;EACF,CAAC,EAAE,CAACX,GAAG,CAAC,CAAC;;EAET;EACA,MAAMa,QAAQ,GAAIC,KAA0B,IAAK;IAC/C,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACX,WAAW,CAAC,GAAGW,KAAK;MAC3EV,cAAc,CAACW,YAAY,CAAC;MAC5BT,MAAM,CAACC,YAAY,CAACU,OAAO,CAACjB,GAAG,EAAES,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;IAClE;EACF,CAAC;EAED,OAAO,CAACR,WAAW,EAAEU,QAAQ,CAAC;AAChC,CAAC;AAACX,EAAA,CA/BWH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}