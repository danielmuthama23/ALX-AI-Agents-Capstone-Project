{"ast":null,"code":"import{useState,useEffect}from'react';export const useLocalStorage=(key,initialValue)=>{const[storedValue,setStoredValue]=useState(initialValue);// Read from localStorage on initial render\nuseEffect(()=>{try{const item=window.localStorage.getItem(key);if(item){setStoredValue(JSON.parse(item));}}catch(error){console.error(\"Error reading localStorage key \\\"\".concat(key,\"\\\":\"),error);}},[key]);// Return a wrapped version of useState's setter function that persists the new value to localStorage\nconst setValue=value=>{try{// Allow value to be a function so we have the same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;setStoredValue(valueToStore);window.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){console.error(\"Error setting localStorage key \\\"\".concat(key,\"\\\":\"),error);}};return[storedValue,setValue];};","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","concat","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/home/daniel/Documents/PROJECTS/ALX-AI-Agents-Capstone-Project/frontend/src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = <T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((val: T) => T)) => void] => {\n  const [storedValue, setStoredValue] = useState<T>(initialValue);\n\n  // Read from localStorage on initial render\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        setStoredValue(JSON.parse(item));\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAC7BC,GAAW,CACXC,YAAe,GAC+B,CAC9C,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGN,QAAQ,CAAII,YAAY,CAAC,CAE/D;AACAH,SAAS,CAAC,IAAM,CACd,GAAI,CACF,KAAM,CAAAM,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,CAC7C,GAAII,IAAI,CAAE,CACRD,cAAc,CAACK,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAC,CAClC,CACF,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,qCAAAE,MAAA,CAAoCZ,GAAG,QAAMU,KAAK,CAAC,CAClE,CACF,CAAC,CAAE,CAACV,GAAG,CAAC,CAAC,CAET;AACA,KAAM,CAAAa,QAAQ,CAAIC,KAA0B,EAAK,CAC/C,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACZ,WAAW,CAAC,CAAGY,KAAK,CAC3EX,cAAc,CAACY,YAAY,CAAC,CAC5BV,MAAM,CAACC,YAAY,CAACW,OAAO,CAACjB,GAAG,CAAEQ,IAAI,CAACU,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOL,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,qCAAAE,MAAA,CAAoCZ,GAAG,QAAMU,KAAK,CAAC,CAClE,CACF,CAAC,CAED,MAAO,CAACR,WAAW,CAAEW,QAAQ,CAAC,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}